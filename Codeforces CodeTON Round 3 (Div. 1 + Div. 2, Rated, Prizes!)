Problem A


n = int(input())
for i in range(n):
    a = int(input())
    t = list(map(int, input().split()))
    if t[0] == 1:
        print('Yes')
    else:
        print('No')






Problem B

import os
import sys
from io import BytesIO, IOBase

BUFSIZE = 8192


class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")


sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
input = lambda: sys.stdin.readline().rstrip("\r\n")


def Substring(s):
    ans, temp = 1, 1

    # Traverse the string
    for i in range(1, len(s)):

        # If character is same as
        # previous increment temp value
        if (s[i] == s[i - 1]):
            temp += 1
        else:
            ans = max(ans, temp)
            temp = 1

    ans = max(ans, temp)

    # Return the required answer
    return ans


def solve():
    a = int(input())
    b = input()
    d = ((Substring(b))) ** 2
    if b.count('0') > 0 and b.count('1') > 0:
        t = b.count('0') * b.count('1')
    else:
        t = max(b.count('0'), b.count('1'))
    print(max(d, t))


T = 1
T = int(input())
for t in range(1, T + 1):
    solve()
    
    
    
    
Problem C


import os
import sys
from io import BytesIO, IOBase

BUFSIZE = 8192


class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")


sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
input = lambda: sys.stdin.readline().rstrip("\r\n")


def solve():
    a = int(input())
    first = list(input())
    second = list(input())
    full = []
    for j in range(a):
        full.append((int((first[j])) + int((second[j]))) % 2)
    cnt = 0
    flag = False
    if full == [0] * a or full == [1] * a:
        tr = 0
        flag = True
        c = len([int(i) for i in first if int(i) == 1])
        d = []
        for k in range(a):
            if first[k] == '1':
                d.append([k + 1, k + 1])
                tr += 1
                if k == 0:
                    cnt += 1
        second[0] = str(((int(second[0])) + (tr - cnt) % 2 + 2) % 2)

        if second[0] == '1' and a % 2 == 1:

            d.append([1, 1])
            d.append([2, a])
            d.append([1, a])
            c += 3
        elif second[0] == '1' and a % 2 == 0:
            d.append([1, a // 2])
            d.append([1 + a // 2, a])
            d.append([1, a])
            c += 3
        elif second[0] == '0':
            c += 0
        if flag == False:
            print('No')
        else:
            print('Yes')
            print(c)
            for k in d:
                print(*k)

    else:
        print('No')


T = 1
T = int(input())
for t in range(T):
    solve()




